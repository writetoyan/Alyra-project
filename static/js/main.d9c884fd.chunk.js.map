{"version":3,"sources":["contexts/EthContext/EthContext.js","contexts/EthContext/state.js","contexts/EthContext/EthProvider.jsx","contexts/EthContext/useEth.js","components/State/Register.js","components/State/Proposal.js","components/State/Vote.js","components/State/TallyVote.js","components/RtMain.js","components/RtWhitelist.js","components/RtProposals.js","components/RtResults.js","components/NavigationBar.js","App.jsx","index.js"],"names":["EthContext","createContext","actions","initialState","artifact","web3","accounts","networkID","contract","reducer","state","action","type","data","Error","EthProvider","children","useReducer","dispatch","init","useCallback","Web3","givenProvider","eth","requestAccounts","net","getId","abi","address","networks","Contract","err","console","error","useEffect","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener","Provider","value","useEth","useContext","Register","props","useState","inputValue","setInputValue","handleSubmit","event","preventDefault","methods","addVoter","send","from","workflowStatus","currentOwner","Form","className","onSubmit","Control","size","placeholder","name","onChange","target","Button","onClick","Alert","Proposal","addProposal","Vote","setVote","TallyVote","Link","href","RtMain","setWorkflowStatus","setCurrentOwner","getCurrentStatus","call","owner","startProposal","startProposalsRegistering","endProposal","endProposalsRegistering","startVoting","startVotingSession","endVoting","endVotingSession","tallyVote","tallyVotes","Card","variant","RtWhitelist","voters","setVoters","txn","setTxn","getVoter","votersData","VoterRegistered","fromBlock","log","Row","id","Col","Table","striped","JSON","stringify","isRegistered","hasVoted","votedProposalId","bordered","hover","slice","length","map","index","returnValues","_voterAddress","RtProposals","proposal","setProposal","getOneProposal","proposalData","getPastEvents","toBlock","then","description","voteCount","_proposalId","_proposal","RtResults","winnerId","setWinnerId","winner","winningProposalID","Header","NavigationBar","Navbar","bg","expand","Container","Brand","Toggle","Collapse","Nav","as","to","path","element","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"6p6YAIeA,G,OAFIC,2B,iDCFbC,EACE,OAGFC,EAAe,CACnBC,SAAU,KACVC,KAAM,KACNC,SAAU,KACVC,UAAW,KACXC,SAAU,MAGNC,EAAU,SAACC,EAAOC,GACtB,IAAQC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACd,GAAQD,IACDV,EACH,OAAO,2BAAKQ,GAAUG,GAEtB,MAAM,IAAIC,MAAM,kC,OC8CPC,MA3Df,YAAoC,IAAbC,EAAY,EAAZA,SACrB,EAA0BC,qBAAWR,EAASN,GAA9C,mBAAOO,EAAP,KAAcQ,EAAd,KAEMC,EAAOC,sBAAW,iDACtB,WAAMhB,GAAN,+FACMA,EADN,wBAEUC,EAAO,IAAIgB,IAAKA,IAAKC,eAAiB,uBAFhD,SAG2BjB,EAAKkB,IAAIC,kBAHpC,cAGUlB,EAHV,gBAI4BD,EAAKkB,IAAIE,IAAIC,QAJzC,OAIUnB,EAJV,OAKYoB,EAAQvB,EAARuB,IAER,IACEC,EAAUxB,EAASyB,SAAStB,GAAWqB,QACvCpB,EAAW,IAAIH,EAAKkB,IAAIO,SAASH,EAAKC,GACtC,MAAOG,GACPC,QAAQC,MAAMF,GAEhBb,EAAS,CACPN,KAAMV,EACNW,KAAM,CAAET,WAAUC,OAAMC,WAAUC,YAAWC,cAfnD,4CADsB,sDAmBnB,IA2BL,OAzBA0B,qBAAU,WACR,IAAMC,EAAO,iDAAG,8FACd,IACQ/B,EAAWgC,EAAQ,KACzBjB,EAAKf,GACL,MAAO2B,GACPC,QAAQC,MAAMF,GALF,2CAAH,qDASbI,MACC,CAAChB,IAEJe,qBAAU,WACR,IAAMG,EAAS,CAAC,eAAgB,mBAC1BC,EAAe,WACnBnB,EAAKT,EAAMN,WAIb,OADAiC,EAAOE,SAAQ,SAAAC,GAAC,OAAIC,OAAOC,SAASC,GAAGH,EAAGF,MACnC,WACLD,EAAOE,SAAQ,SAAAC,GAAC,OAAIC,OAAOC,SAASE,eAAeJ,EAAGF,SAEvD,CAACnB,EAAMT,EAAMN,WAGd,cAAC,EAAWyC,SAAZ,CAAqBC,MAAO,CAC1BpC,QACAQ,YAFF,SAIGF,KCtDQ+B,EAFA,kBAAMC,qBAAWhD,I,wBCGjB,SAASiD,EAASC,GAE7B,MAA0CH,IAAlCrC,MAASF,EAAjB,EAAiBA,SAAUF,EAA3B,EAA2BA,SAC3B,EAAsC6C,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAOMC,EAAY,iDAAG,WAAMC,GAAN,kFACjBA,EAAMC,iBADW,kBAGXhD,EAASiD,QAAQC,SAASN,GAAYO,KAAK,CAACC,KAAMtD,EAAS,KAHhD,sDAKb0B,QAAQC,MAAR,MALa,wDAAH,sDAUlB,OACI,gCAE8B,MAAzBiB,EAAMW,gBAA0BX,EAAMY,eAAiBxD,EAAS,IACjE,eAACyD,EAAA,EAAD,CAAMC,UAAU,OAAOC,SAAUX,EAAjC,UACI,cAACS,EAAA,EAAKG,QAAN,CACIF,UAAU,QACVG,KAAK,KACLvD,KAAK,OACLwD,YAAY,0BACZC,KAAK,eACLvB,MAAOM,EACPkB,SA3BU,SAAAf,GACpBF,EAAcE,EAAMgB,OAAOzB,UA4BrB,cAAC0B,EAAA,EAAD,CAAQR,UAAU,mBAAmBG,KAAK,KAAKM,QAASnB,EAAxD,kCAIsB,MAAzBJ,EAAMW,gBAA0BX,EAAMY,eAAiBxD,EAAS,IACjE,cAACoE,EAAA,EAAD,CAAOV,UAAU,YAAjB,gHCxCG,SAASW,EAASzB,GAE7B,MAA0CH,IAAlCrC,MAASF,EAAjB,EAAiBA,SAAUF,EAA3B,EAA2BA,SAC3B,EAAsC6C,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAOMC,EAAY,iDAAG,WAAMC,GAAN,kFACjBA,EAAMC,iBADW,kBAGXhD,EAASiD,QAAQmB,YAAYxB,GAAYO,KAAK,CAACC,KAAMtD,EAAS,KAHnD,sDAKb0B,QAAQC,MAAR,MALa,wDAAH,sDASlB,OAEI,8BAE8B,MAAzBiB,EAAMW,gBACP,eAACE,EAAA,EAAD,CAAMC,UAAU,OAAOC,SAAUX,EAAjC,UACI,cAACS,EAAA,EAAKG,QAAN,CACIF,UAAU,QACVG,KAAK,KACLvD,KAAK,OACLwD,YAAY,mBACZC,KAAK,WACLvB,MAAOM,EACPkB,SA3BU,SAAAf,GACpBF,EAAcE,EAAMgB,OAAOzB,UA4BpBI,EAAMY,eAAiBxD,EAAS,GACjC,cAACkE,EAAA,EAAD,CAAQR,UAAU,wBAAwBG,KAAK,KAAKM,QAASnB,EAA7D,8BACA,cAACkB,EAAA,EAAD,CAAQR,UAAU,mBAAmBG,KAAK,KAAKM,QAASnB,EAAxD,mCCnCD,SAASuB,EAAK3B,GAEzB,MAA0CH,IAAlCrC,MAASF,EAAjB,EAAiBA,SAAUF,EAA3B,EAA2BA,SAC3B,EAAsC6C,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAOMC,EAAY,iDAAG,WAAMC,GAAN,kFACjBA,EAAMC,iBADW,kBAGXhD,EAASiD,QAAQqB,QAAQ1B,GAAYO,KAAK,CAACC,KAAMtD,EAAS,KAH/C,sDAKb0B,QAAQC,MAAR,MALa,wDAAH,sDASlB,OAEI,gCAE8B,MAAzBiB,EAAMW,gBACP,eAACE,EAAA,EAAD,CAAMC,UAAU,OAAOC,SAAUX,EAAjC,UACI,cAACS,EAAA,EAAKG,QAAN,CACIF,UAAU,IACVG,KAAK,KACLvD,KAAK,OACLwD,YAAY,6BACZC,KAAK,eACLvB,MAAOM,EACPkB,SA3BU,SAAAf,GACpBF,EAAcE,EAAMgB,OAAOzB,UA4BpBI,EAAMY,eAAiBxD,EAAS,GACjC,cAACkE,EAAA,EAAD,CAAQR,UAAU,wBAAwBG,KAAK,KAAKM,QAASnB,EAA7D,oBACA,cAACkB,EAAA,EAAD,CAAQR,UAAU,mBAAmBG,KAAK,KAAKM,QAASnB,EAAxD,uBAKsB,MAAzBJ,EAAMW,gBAA0BX,EAAMY,eAAiBxD,EAAS,IACjE,cAACoE,EAAA,EAAD,CAAOV,UAAU,YAAjB,+CC3CG,SAASe,EAAU7B,GAE9B,IAAiB5C,EAAeyC,IAAxBrC,MAASJ,SAEjB,OACI,gCAE8B,MAAzB4C,EAAMW,gBAA0BX,EAAMY,eAAiBxD,EAAS,IAC7D,cAACoE,EAAA,EAAD,CAAOV,UAAU,YAAjB,iGAGsB,MAAzBd,EAAMW,gBACH,eAACa,EAAA,EAAD,CAAOV,UAAU,YAAjB,gDAAgE,cAACU,EAAA,EAAMM,KAAP,CAAYC,KAAK,WAAjB,qBAAhE,kB,YCPD,SAASC,IAEpB,MAA0CnC,IAAlCrC,MAASF,EAAjB,EAAiBA,SAAUF,EAA3B,EAA2BA,SAC3B,EAA4C6C,mBAAS,IAArD,mBAAOU,EAAP,KAAuBsB,EAAvB,KACA,EAAyChC,qBAAzC,mBAAOW,EAAP,KAAqBsB,EAArB,KAGMC,EAAgB,iDAAG,yHAEQ7E,EAASiD,QAAQI,iBAAiByB,OAF1C,cAEfzB,EAFe,gBAGMrD,EAASiD,QAAQ8B,QAAQD,OAH/B,OAGfxB,EAHe,OAIrBqB,EAAkBtB,GAClBuB,EAAgBtB,GALK,kDAOjB9B,QAAQC,MAAR,MAPiB,0DAAH,qDAYhBuD,EAAa,iDAAG,wGACZhF,EAASiD,QAAQgC,4BAA4B9B,KAAK,CAACC,KAAMtD,EAAS,KADtD,OAElB+E,IAFkB,2CAAH,qDAKbK,EAAW,iDAAG,wGACVlF,EAASiD,QAAQkC,0BAA0BhC,KAAK,CAACC,KAAMtD,EAAS,KADtD,OAEhB+E,IAFgB,2CAAH,qDAKXO,EAAW,iDAAG,wGACVpF,EAASiD,QAAQoC,qBAAqBlC,KAAK,CAACC,KAAMtD,EAAS,KADjD,OAEhB+E,IAFgB,2CAAH,qDAKXS,EAAS,iDAAG,wGACRtF,EAASiD,QAAQsC,mBAAmBpC,KAAK,CAACC,KAAMtD,EAAS,KADjD,OAEd+E,IAFc,2CAAH,qDAKTW,EAAS,iDAAG,wGACRxF,EAASiD,QAAQwC,aAAatC,KAAK,CAACC,KAAMtD,EAAS,KAD3C,OAEd+E,IAFc,2CAAH,qDAMf,OACI,8BAEI,eAACa,EAAA,EAAD,CAAMlC,UAAU,mDAAhB,UAAuF,MAAnBH,EAAyB,sBACtE,MAAnBA,EAAyB,kBACN,MAAnBA,EAAyB,yBACN,MAAnBA,EAAyB,gBACN,MAAnBA,EAAyB,uBACN,MAAnBA,EAAyB,mCAAqC,kDAG1C,KAAnBA,GACD,qBAAKG,UAAU,uCAAuCS,QAASY,EAA/D,SACI,cAACb,EAAA,EAAD,CAAQ2B,QAAQ,UAAUhC,KAAK,KAA/B,8BAOJ,cAAClB,EAAD,CAAUY,eAAgBA,EAAgBC,aAAcA,IACxD,cAACa,EAAD,CAAUd,eAAgBA,EAAgBC,aAAcA,IACxD,cAACe,EAAD,CAAMhB,eAAgBA,EAAgBC,aAAcA,IACpD,cAACiB,EAAD,CAAWlB,eAAgBA,EAAgBC,aAAcA,IAGzD,8BACwB,MAAnBD,GAA0BC,IAAiBxD,EAAS,GACrD,cAACkE,EAAA,EAAD,CAAQR,UAAU,wBAAwBG,KAAK,KAAKM,QAASe,EAA7D,4BACmB,MAAnB3B,GAA0BC,IAAiBxD,EAAS,GACpD,cAACkE,EAAA,EAAD,CAAQR,UAAU,wBAAwBG,KAAK,KAAKM,QAASiB,EAA7D,0BACmB,MAAnB7B,GAA0BC,IAAiBxD,EAAS,GACpD,cAACkE,EAAA,EAAD,CAAQR,UAAU,wBAAwBG,KAAK,KAAKM,QAASmB,EAA7D,0BACmB,MAAnB/B,GAA0BC,IAAiBxD,EAAS,GACpD,cAACkE,EAAA,EAAD,CAAQR,UAAU,wBAAwBG,KAAK,KAAKM,QAASqB,EAA7D,wBACmB,MAAnBjC,GAA0BC,IAAiBxD,EAAS,GACpD,cAACkE,EAAA,EAAD,CAAQR,UAAU,wBAAwBG,KAAK,KAAKM,QAASuB,EAA7D,wBACA,6B,sCClFL,SAASI,IAEpB,MAA0CrD,IAAlCrC,MAASF,EAAjB,EAAiBA,SAAUF,EAA3B,EAA2BA,SAC3B,EAAsC6C,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KACA,EAA4BF,mBAAS,IAArC,mBAAOkD,EAAP,KAAeC,EAAf,KACA,EAAsBnD,mBAAS,IAA/B,mBAAOoD,EAAP,KAAYC,EAAZ,KAOMlD,EAAY,iDAAG,WAAOC,GAAP,wFACjBA,EAAMC,iBADW,kBAGQhD,EAASiD,QAAQgD,SAASrD,GAAYkC,KAAK,CAAC1B,KAAMtD,EAAS,KAHnE,OAGXoG,EAHW,OAIjBJ,EAAUI,GAJO,gDAMb1E,QAAQC,MAAR,MANa,yDAAH,sDAoBlB,OATAC,qBAAU,WACN1B,EAAS6B,OAAOsE,gBAAgB,CAC5BC,UAAW,IAEdjE,GAAG,QAAQ,SAACY,GAAWvB,QAAQ6E,IAAItD,GAChCiD,GAAO,SAACnE,GAAD,4BAAgBA,GAAhB,CAAwBkB,YAElC,IAGD,8BACI,eAAC2C,EAAA,EAAD,CAAMlC,UAAU,uCAAhB,UACI,oBAAIA,UAAU,cAAd,gCAEA,eAACD,EAAA,EAAD,CAAMC,UAAU,OAAhB,UACI,cAACD,EAAA,EAAKG,QAAN,CACIF,UAAU,aACVG,KAAK,KACLvD,KAAK,OACLwD,YAAY,mBACZC,KAAK,aACLvB,MAAOM,EACPkB,SAtCM,SAAAf,GACtBF,EAAcE,EAAMgB,OAAOzB,UAuCf,eAACgE,EAAA,EAAD,CAAK9C,UAAU,4BAAf,UACI,cAACQ,EAAA,EAAD,CAAQuC,GAAG,IAAI/C,UAAU,2BAA2BG,KAAK,KAAKM,QAASnB,EAAvE,wBACA,cAAC0D,EAAA,EAAD,CAAKhD,UAAU,aACf,cAACkC,EAAA,EAAD,CAAMlC,UAAU,iCAAhB,SAEI,eAACiD,EAAA,EAAD,CAAOC,SAAO,EAAd,UACI,gCACI,+BACI,+CACA,2CACA,wDAGR,gCACI,+BACI,6BAAKC,KAAKC,UAAUf,EAAOgB,gBAC3B,6BAAKF,KAAKC,UAAUf,EAAOiB,YAC3B,6BAAKjB,EAAOkB,kCASpC,eAACN,EAAA,EAAD,CAAOjD,UAAU,OAAOkD,SAAO,EAACM,UAAQ,EAACC,OAAK,EAACtB,QAAQ,UAAvD,UACI,gCACI,+BACI,mCACA,4DAGR,gCACMI,EAAImB,MAAMnB,EAAIoB,OAAO,GAAGC,KAAI,SAAChG,EAASiG,GAAV,OAAoB,+BAAgB,6BAAiBA,GAARA,GAAmB,6BAAmBjG,EAAQkG,aAAaC,eAA/BnG,KAA5CiG,gBCjFpE,SAASG,IAEpB,MAA0CjF,IAAlCrC,MAASF,EAAjB,EAAiBA,SAAUF,EAA3B,EAA2BA,SAC3B,EAAsC6C,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KACA,EAAkCF,mBAAS,IAA3C,mBAAQ8E,EAAR,KAAkBC,EAAlB,KACA,EAAsB/E,mBAAS,IAA/B,mBAAOoD,EAAP,KAAYC,EAAZ,KAOMlD,EAAY,iDAAG,WAAMC,GAAN,wFACjBA,EAAMC,iBADW,kBAGUhD,EAASiD,QAAQ0E,eAAe/E,GAAYkC,KAAK,CAAC1B,KAAMtD,EAAS,KAH3E,OAGX8H,EAHW,OAIjBF,EAAYE,GAJK,gDAMbpG,QAAQC,MAAR,MANa,yDAAH,sDAqBlB,OAVAC,qBAAU,WACN1B,EAAS6H,cAAc,qBAAsB,CACzCzB,UAAW,EACX0B,QAAS,WACV,SAASrG,EAAOI,GAAQL,QAAQ6E,IAAIxE,MACtCkG,MAAK,SAASlG,GACXmE,EAAOnE,QAEZ,IAGC,8BACA,eAAC6D,EAAA,EAAD,CAAMlC,UAAU,uCAAhB,UACI,oBAAIA,UAAU,cAAd,uBAEA,eAACD,EAAA,EAAD,CAAMC,UAAU,OAAhB,UACI,cAACD,EAAA,EAAKG,QAAN,CACIF,UAAU,aACVG,KAAK,KACLvD,KAAK,OACLwD,YAAY,kBACZC,KAAK,cACLvB,MAAOM,EACPkB,SAvCU,SAAAf,GACtBF,EAAcE,EAAMgB,OAAOzB,UAwCnB,eAACgE,EAAA,EAAD,CAAK9C,UAAU,4BAAf,UACI,cAACQ,EAAA,EAAD,CAAQR,UAAU,wBAAwBG,KAAK,KAAKM,QAASnB,EAA7D,2BACA,cAAC0D,EAAA,EAAD,CAAKhD,UAAU,UACf,cAACkC,EAAA,EAAD,CAAMlC,UAAU,+BAAhB,SAEI,eAACiD,EAAA,EAAD,CAAOC,SAAO,EAAd,UACI,gCACI,+BACI,0CACA,iDAGR,gCACI,+BACI,6BAAKe,EAASO,cACd,6BAAKP,EAASQ,4BAStC,eAACxB,EAAA,EAAD,CAAOjD,UAAU,OAAOkD,SAAO,EAACM,UAAQ,EAACC,OAAK,EAACtB,QAAQ,UAAvD,UACI,gCACI,+BACI,mCACA,gDAGR,gCACII,EAAIqB,KAAI,SAACrB,EAAKsB,GAAN,OAAgB,+BAAgB,6BAAiBtB,EAAIuB,aAAaY,aAAzBb,GAA0C,6BAAetB,EAAIuB,aAAaa,WAAvBpC,KAAnEsB,gBCnFtC,SAASe,IAEpB,MAA0C7F,IAAlCrC,MAASF,EAAjB,EAAiBA,SAAUF,EAA3B,EAA2BA,SAC3B,EAAgC6C,qBAAhC,mBAAO0F,EAAP,KAAiBC,EAAjB,KACA,EAA4C3F,qBAA5C,mBAAOU,EAAP,KAAuBsB,EAAvB,KACA,EAAkChC,mBAAS,IAA3C,mBAAQ8E,EAAR,KAAkBC,EAAlB,KAGMa,EAAM,iDAAG,2HAEkBvI,EAASiD,QAAQI,iBAAiByB,OAFpD,cAELzB,EAFK,OAGXsB,EAAkBtB,GAHP,SAIYrD,EAASiD,QAAQuF,oBAAoB1D,OAJjD,cAILuD,EAJK,OAKXC,EAAYD,GALD,UAMgBrI,EAASiD,QAAQ0E,eAAeU,GAAUvD,KAAK,CAAC1B,KAAMtD,EAAS,KAN/E,QAML8H,EANK,OAOXF,EAAYE,GAPD,kDASPpG,QAAQC,MAAR,MATO,0DAAH,qDAcZ,OAEI,8BACI,eAACiE,EAAA,EAAD,CAAMlC,UAAU,uCAAhB,UACI,cAACkC,EAAA,EAAK+C,OAAN,UACI,oBAAIjF,UAAU,cAAd,sBAEA,cAACQ,EAAA,EAAD,CAAQR,UAAU,gCAAgCG,KAAK,KAAKM,QAASsE,EAArE,+BAIoB,MAAnBlF,GACD,eAACqC,EAAA,EAAD,CAAMlC,UAAU,sCAAhB,UACI,+DACA,+BAAK6E,EAAL,OACA,6BAAKZ,EAASO,iBAGjB3E,EAAiB,KAClB,cAACa,EAAA,EAAD,CAAOV,UAAU,iCAAjB,mG,+CCvCL,SAASkF,IAEtB,IAAiB5I,EAAeyC,IAAxBrC,MAASJ,SAEjB,OACE,eAAC,IAAD,WACE,cAAC6I,EAAA,EAAD,CAAQC,GAAG,UAAUjD,QAAQ,OAAOkD,OAAO,KAA3C,SACE,eAACC,EAAA,EAAD,WACE,cAACH,EAAA,EAAOI,MAAR,CAActE,KAAK,QAAnB,yCACA,cAACkE,EAAA,EAAOK,OAAR,CAAe,gBAAc,qBAC7B,cAACL,EAAA,EAAOM,SAAR,CAAiB1C,GAAG,mBAApB,SACE,eAAC2C,EAAA,EAAD,CAAK1F,UAAU,UAAf,UACE,cAAC0F,EAAA,EAAI1E,KAAL,CAAU2E,GAAI3E,IAAM4E,GAAI,IAAxB,kBACA,cAACF,EAAA,EAAI1E,KAAL,CAAU2E,GAAI3E,IAAM4E,GAAI,aAAxB,gCACA,cAACF,EAAA,EAAI1E,KAAL,CAAU2E,GAAI3E,IAAM4E,GAAI,aAAxB,uBACA,cAACF,EAAA,EAAI1E,KAAL,CAAU2E,GAAI3E,IAAM4E,GAAI,WAAxB,0BAGJ,sBAAK5F,UAAU,aAAf,6BACiB1D,UAInB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuJ,KAAK,IAAIC,QAAS,cAAC5E,EAAD,MACzB,cAAC,IAAD,CAAO2E,KAAK,aAAaC,QAAS,cAAC1D,EAAD,MAClC,cAAC,IAAD,CAAOyD,KAAK,aAAaC,QAAS,cAAC9B,EAAD,MAClC,cAAC,IAAD,CAAO6B,KAAK,WAAWC,QAAS,cAAClB,EAAD,MAChC,cAAC,IAAD,CAAOiB,KAAK,iBAAiBC,QAAS,cAAC5E,EAAD,Y,cC/BjC,SAAS6E,IAEtB,OACE,cAAC,EAAD,UACE,qBAAK/F,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAACkF,EAAD,UCPGc,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,S","file":"static/js/main.d9c884fd.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst EthContext = createContext();\n\nexport default EthContext;\n","const actions = {\n  init: \"INIT\",\n};\n\nconst initialState = {\n  artifact: null,\n  web3: null,\n  accounts: null,\n  networkID: null,\n  contract: null\n};\n\nconst reducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case actions.init:\n      return { ...state, ...data };\n    default:\n      throw new Error(\"Undefined reducer action type\");\n  }\n};\n\nexport {\n  actions,\n  initialState,\n  reducer\n};\n","import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n        } catch (err) {\n          console.error(err);\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract }\n        });\n      }\n    }, []);\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/Voting.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n","import { useContext } from \"react\";\nimport EthContext from \"./EthContext\";\n\nconst useEth = () => useContext(EthContext);\n\nexport default useEth;\n","import React, {useState} from 'react';\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\n\nexport default function Register(props) {\n\n    const { state: { contract, accounts } } = useEth();\n    const [ inputValue, setInputValue ] = useState(\"\")\n   \n    const handleInputChange = event => {\n          setInputValue(event.target.value);\n    };\n\n    //function to register a voter \n    const handleSubmit = async event => { \n        event.preventDefault();\n        try{\n        await contract.methods.addVoter(inputValue).send({from: accounts[0]});\n        } catch(err) {\n            console.error(err);\n        }\n    }\n\n\n    return(\n        <div>\n            {/*Display the address register form - only visible for the owner*/}\n            {props.workflowStatus === \"0\" && props.currentOwner === accounts[0] &&\n            <Form className=\"mt-5\" onSubmit={handleSubmit}>\n                <Form.Control \n                    className=\"col-6\"\n                    size=\"lg\"\n                    type=\"text\" \n                    placeholder=\"Add a new voter address\"\n                    name=\"addressToAdd\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />   \n                <Button className=\"mt-5 gap-2 col-6\" size=\"lg\" onClick={handleSubmit}> Add a new voter </Button>\n            </Form>\n            }\n            {/*Display for the users when the register period is not over*/}\n            {props.workflowStatus === \"0\" && props.currentOwner !== accounts[0] &&\n            <Alert className=\"mt-5 mb-3\">You will soon be able to make proposal. Please wait for everyone to be registered by the admin.</Alert>\n            }\n        </div>\n    );\n}\n","import React, {useState} from 'react';\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nexport default function Proposal(props) {\n    \n    const { state: { contract, accounts } } = useEth();\n    const [ inputValue, setInputValue ] = useState(\"\")\n   \n    const handleInputChange = event => {\n          setInputValue(event.target.value);\n    };\n\n    //function to add a proposal\n    const handleSubmit = async event => {\n        event.preventDefault();\n        try{\n        await contract.methods.addProposal(inputValue).send({from: accounts[0]});\n        } catch(err) {\n            console.error(err);\n        }\n    }\n\n    return(\n\n        <div>\n            {/*Voters can make proposals*/}\n            {props.workflowStatus === \"1\" &&\n            <Form className=\"mt-5\" onSubmit={handleSubmit}>\n                <Form.Control \n                    className=\"col-6\"\n                    size=\"lg\"\n                    type=\"text\" \n                    placeholder=\"Enter a proposal\"\n                    name=\"proposal\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n                {props.currentOwner !== accounts[0] ?\n                <Button className=\"mt-5 mb-5 gap-2 col-6\" size=\"lg\" onClick={handleSubmit}> Add a proposal </Button> :\n                <Button className=\"mt-5 gap-2 col-6\" size=\"lg\" onClick={handleSubmit}> Add a proposal </Button> \n                }\n            </Form>\n            }\n        </div>\n\n    );\n}\n","import React, {useState} from 'react';\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\n\nexport default function Vote(props) {\n    \n    const { state: { contract, accounts } } = useEth();\n    const [ inputValue, setInputValue ] = useState(\"\");\n\n    const handleInputChange = event => {\n          setInputValue(event.target.value);\n    };\n\n    //function to vote\n    const handleSubmit = async event => {\n        event.preventDefault();\n        try{\n        await contract.methods.setVote(inputValue).send({from: accounts[0]});\n        } catch(err) {\n            console.error(err);\n        }\n    }\n\n    return(\n\n        <div>\n            {/*Form used by user to vote*/}\n            {props.workflowStatus === \"3\" &&\n            <Form className=\"mt-5\" onSubmit={handleSubmit}>\n                <Form.Control \n                    className=\"6\"\n                    size=\"lg\"\n                    type=\"text\" \n                    placeholder=\"Vote for a proposal number\"\n                    name=\"voteProposal\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n                {props.currentOwner !== accounts[0] ?\n                <Button className=\"mt-5 mb-5 gap-2 col-6\" size=\"lg\" onClick={handleSubmit}> Vote </Button> :\n                <Button className=\"mt-5 gap-2 col-6\" size=\"lg\" onClick={handleSubmit}> Vote </Button>\n                }\n            </Form>\n            }\n            {/*Display message for the user if the admin haven't started the voting period*/}   \n            {props.workflowStatus === \"2\" && props.currentOwner !== accounts[0] &&\n            <Alert className=\"mt-5 mb-3\">You will soon be able to vote!</Alert>\n            }\n        </div>\n\n    );\n}\n\n","import React from 'react';\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Alert from \"react-bootstrap/Alert\"\n\n\nexport default function TallyVote(props) {\n    \n    const { state: { accounts } } = useEth();\n\n    return (\n        <div>\n            {/*Display for the user if the admin haven't tallied vote*/}\n            {props.workflowStatus === \"4\" && props.currentOwner !== accounts[0] &&\n                <Alert className=\"mt-5 mb-3\">The admin is tallying vote. Please come back later to check the results of the vote</Alert>\n            }\n            {/*Display for the user when the result is known*/}\n            {props.workflowStatus === \"5\" &&\n                <Alert className=\"mt-5 mb-3\">The results of the vote are on the <Alert.Link href=\"/results\">Results</Alert.Link> section.</Alert>\n            }\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport useEth from \"../contexts/EthContext/useEth\";\nimport Register from \"./State/Register\"\nimport Proposal from \"./State/Proposal\"\nimport Vote from \"./State/Vote\"\nimport TallyVote from \"./State/TallyVote\"\nimport Button from \"react-bootstrap/Button\"\nimport Card from \"react-bootstrap/Card\";\n\n//Component managing the whole voting process\nexport default function RtMain() {\n\n    const { state: { contract, accounts } } = useEth();\n    const [workflowStatus, setWorkflowStatus] = useState(\"\");\n    const [currentOwner, setCurrentOwner ] = useState();\n\n    //Enter the app with correct rendering\n    const getCurrentStatus = async () => {\n        try{\n        const workflowStatus = await contract.methods.workflowStatus().call();\n        const currentOwner = await contract.methods.owner().call();\n        setWorkflowStatus(workflowStatus);\n        setCurrentOwner(currentOwner);\n        } catch(err) {\n            console.error(err);\n        }\n    }\n\n    //functions to change the workflow status\n    const startProposal = async () => {\n        await contract.methods.startProposalsRegistering().send({from: accounts[0]});\n        getCurrentStatus();\n    }\n\n    const endProposal = async () => {\n        await contract.methods.endProposalsRegistering().send({from: accounts[0]})\n        getCurrentStatus();\n    }\n\n    const startVoting = async () => {\n        await contract.methods.startVotingSession().send({from: accounts[0]})\n        getCurrentStatus();\n    }\n\n    const endVoting = async () => {\n        await contract.methods.endVotingSession().send({from: accounts[0]})\n        getCurrentStatus();\n    }\n\n    const tallyVote = async () => {\n        await contract.methods.tallyVotes().send({from: accounts[0]})\n        getCurrentStatus();\n    }\n\n    \n    return (\n        <div>    \n            {/*Info about the current status*/}\n            <Card className=\"text-center mt-5 shadow p-3 mb-5 bg-body rounded\">{workflowStatus === \"0\" ? 'Registration period' : \n                workflowStatus === \"1\" ? 'Proposal Period' :\n                workflowStatus === \"2\" ? 'Proposal Period Closed' :\n                workflowStatus === \"3\" ? 'Voting Period' :\n                workflowStatus === \"4\" ? 'Voting Period Closed' :\n                workflowStatus === \"5\" ? 'Thank you for your participation' : \"Experience a new way to participate in decision\"\n                }\n                        \n                {workflowStatus === \"\" &&\n                <div className=\"mt-5 mb-5 d-grid gap-2 col-4 mx-auto\" onClick={getCurrentStatus}>\n                    <Button variant=\"primary\" size=\"lg\">\n                        Enter the vote\n                    </Button>\n                </div>\n                }     \n\n                {/*Rendering the component corresponding to the current status*/}\n                <Register workflowStatus={workflowStatus} currentOwner={currentOwner}/>\n                <Proposal workflowStatus={workflowStatus} currentOwner={currentOwner}/>\n                <Vote workflowStatus={workflowStatus} currentOwner={currentOwner}/>\n                <TallyVote workflowStatus={workflowStatus} currentOwner={currentOwner}/>\n\n                {/*Rendering the right button to go to the next status - admin only*/}    \n                <div>\n                    {workflowStatus === \"0\" && currentOwner === accounts[0] ? \n                    <Button className=\"mt-4 mb-5 gap-2 col-6\" size=\"lg\" onClick={startProposal}>Start proposal</Button> :\n                    workflowStatus === \"1\" && currentOwner === accounts[0] ?\n                    <Button className=\"mt-4 mb-5 gap-2 col-6\" size=\"lg\" onClick={endProposal}>End proposal</Button> :\n                    workflowStatus === \"2\" && currentOwner === accounts[0] ?\n                    <Button className=\"mt-5 mb-5 gap-2 col-6\" size=\"lg\" onClick={startVoting}>Start voting</Button>:\n                    workflowStatus === \"3\" && currentOwner === accounts[0] ?\n                    <Button className=\"mt-4 mb-5 gap-2 col-6\" size=\"lg\" onClick={endVoting}>End voting</Button> :\n                    workflowStatus === \"4\" && currentOwner === accounts[0] ?\n                    <Button className=\"mt-5 mb-5 gap-2 col-6\" size=\"lg\" onClick={tallyVote}>Tally vote</Button> :\n                    <p></p>\n                    }\n                </div>\n            </Card>\n                    \n            \n        </div>\n    )\n}\n\n","import React, {useState, useEffect} from 'react';\nimport useEth from \"../contexts/EthContext/useEth\";\nimport Table from 'react-bootstrap/Table';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col';\n\n//Page that gives the info about all the registered users\nexport default function RtWhitelist() {\n\n    const { state: { contract, accounts } } = useEth();\n    const [ inputValue, setInputValue ] = useState(\"\");\n    const [voters, setVoters] = useState({});\n    const [txn, setTxn] = useState([])\n\n    const handleInputChange = event => {\n        setInputValue(event.target.value);\n    };\n    \n    //Function that give more info about a voter\n    const handleSubmit = async (event) => { \n        event.preventDefault();\n        try {\n        const votersData = await contract.methods.getVoter(inputValue).call({from: accounts[0]});\n        setVoters(votersData)\n        } catch(err) {\n            console.error(err)\n        }\n    }\n\n    //Event to get the registered addresses\n    useEffect(() => {\n        contract.events.VoterRegistered({\n            fromBlock: 0\n        })\n        .on('data', (event) => {console.log(event)\n            setTxn((events) => [...events, event])\n        })\n       },[])\n\n    return (\n        <div>\n            <Card className=\"mt-5 shadow p-3 mb-5 bg-body rounded\">\n                <h3 className=\"text-center\">Whitelisted Voters</h3>\n                {/*User can enter the address he wants to have more info on*/}\n                <Form className=\"mt-5\">\n                    <Form.Control\n                        className=\"col-6 mb-3\"\n                        size=\"lg\"\n                        type=\"text\" \n                        placeholder=\"Enter an address\"\n                        name=\"getAddress\"\n                        value={inputValue}\n                        onChange={handleInputChange}\n                    />\n                    <Row className=\"justify-content-md-center\"> \n                        <Button id=\"i\" className=\"mt-5 mb-5 gap-2 col-md-4\" size=\"lg\" onClick={handleSubmit}> get voter</Button>\n                        <Col className=\"col-sm-2\"></Col>\n                        <Card className=\"text-center col-md-4 mt-3 mb-3\">\n                            {/*Display the info about the address asked*/}\n                            <Table striped>\n                                <thead>\n                                    <tr>\n                                        <th>Is registered</th>\n                                        <th>Has voted</th>\n                                        <th>Voted proposal ID</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>{JSON.stringify(voters.isRegistered)}</td>\n                                        <td>{JSON.stringify(voters.hasVoted)}</td>\n                                        <td>{voters.votedProposalId}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        </Card>\n                    </Row>\n                </Form> \n\n                {/*List of all the registered addresses*/} \n                <Table className=\"mt-3\" striped bordered hover variant=\"primary\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Whitelisted addresses</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                         {txn.slice(txn.length/2).map((address, index) => <tr key={index}><td key={index}>{index}</td><td key={address}>{address.returnValues._voterAddress}</td></tr>)}\n                    </tbody>\n                \n                </Table>\n            </Card>\n        </div>\n    )\n}\n\n","import React, {useState, useEffect} from 'react';\nimport useEth from \"../contexts/EthContext/useEth\";\nimport Table from 'react-bootstrap/Table';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col';\n\n//Page that gives info about the proposals\nexport default function RtProposals() {\n\n    const { state: { contract, accounts } } = useEth();\n    const [ inputValue, setInputValue ] = useState(\"\");\n    const [ proposal, setProposal ] = useState({});\n    const [txn, setTxn] = useState([]);\n\n    const handleInputChange = event => {\n        setInputValue(event.target.value);\n  };\n    \n    //Function that gives more info about a proposal\n    const handleSubmit = async event => { \n        event.preventDefault();\n        try {\n        const proposalData = await contract.methods.getOneProposal(inputValue).call({from: accounts[0]});\n        setProposal(proposalData);\n        } catch(err) {\n            console.error(err)\n        }\n    }\n  \n    //Event to get the proposals made by the voters\n    useEffect(() => {\n        contract.getPastEvents('ProposalRegistered', {\n            fromBlock: 0, \n            toBlock: 'latest'\n        }, function(error, events){console.log(events)})\n        .then(function(events){\n            setTxn(events)\n        })\n    }, [])\n    \n    return (\n        <div>\n        <Card className=\"mt-5 shadow p-3 mb-5 bg-body rounded\">\n            <h3 className=\"text-center\">Proposals</h3>\n            {/*User can enter the number of the proposal he wants more info on*/}\n            <Form className=\"mt-5\">\n                <Form.Control\n                    className=\"col-6 mb-3\"\n                    size=\"lg\"\n                    type=\"text\" \n                    placeholder=\"Enter an number\"\n                    name=\"getProposal\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n                <Row className=\"justify-content-md-center\"> \n                    <Button className=\"mt-5 mb-5 gap-2 col-4\" size=\"lg\" onClick={handleSubmit}> get proposal</Button>\n                    <Col className=\"col-1\"></Col>\n                    <Card className=\"text-center col-6 mt-3 mb-3 \">\n                        {/*Display the info about the proposal asked*/}\n                        <Table striped>\n                            <thead>\n                                <tr>\n                                    <th>Proposal</th>\n                                    <th>Vote count</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>{proposal.description}</td>\n                                    <td>{proposal.voteCount}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </Card>\n                </Row>\n            </Form>  \n\n            {/*List all the proposals*/}\n            <Table className=\"mt-3\" striped bordered hover variant=\"primary\">\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Proposals</th>\n                    </tr>\n                </thead>\n                <tbody>\n                   {txn.map((txn, index) => <tr key={index}><td key={index}>{txn.returnValues._proposalId}</td><td key={txn}>{txn.returnValues._proposal}</td></tr>)}\n                </tbody>\n            </Table>\n        </Card>\n    </div>\n    )\n}\n\n","import React, {useState} from 'react';\nimport useEth from \"../contexts/EthContext/useEth\";\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\n//Page that give the winner proposal\nexport default function RtResults() {\n\n    const { state: { contract, accounts } } = useEth();\n    const [winnerId, setWinnerId] = useState();\n    const [workflowStatus, setWorkflowStatus] = useState();\n    const [ proposal, setProposal ] = useState({});\n\n    //Function that gives the winning proposal only after the vote is over\n    const winner = async () => {\n        try{\n        const workflowStatus = await contract.methods.workflowStatus().call();\n        setWorkflowStatus(workflowStatus);\n        const winnerId = await contract.methods.winningProposalID().call()\n        setWinnerId(winnerId);\n        const proposalData = await contract.methods.getOneProposal(winnerId).call({from: accounts[0]});\n        setProposal(proposalData);   \n        } catch(err) {\n            console.error(err)\n        }\n    }\n\n\n    return (\n    \n        <div>\n            <Card className=\"mt-5 shadow p-3 mb-5 bg-body rounded\">\n                <Card.Header>\n                    <h3 className=\"text-center\">Result</h3>\n                </Card.Header>\n                    <Button className=\"mt-5 mb-5 gap-2 col-8 mx-auto\" size=\"lg\" onClick={winner}>\n                        Reveal the winner\n                    </Button>\n                    {/*Display the winner*/}\n                    {workflowStatus === \"5\" && \n                    <Card className=\"text-center col-8 mt-3 mb-5 mx-auto\"> \n                        <h5>The winner is proposal number</h5> \n                        <h3>{winnerId} </h3>\n                        <h5>{proposal.description}</h5>\n                    </Card>} \n                    {/*Display if the vote is not over*/}\n                    {workflowStatus < \"5\" &&\n                    <Alert className=\"text-center col-8 mx-auto mb-5\">\n                        The voting session is not over yet. Please come back later to check the results.\n                    </Alert>\n                    }\n            </Card>\n        </div>\n    )\n}","import React from 'react';\nimport RtMain from \"./RtMain\";\nimport RtWhitelist from \"./RtWhitelist\";\nimport RtProposals from \"./RtProposals\";\nimport RtResults from \"./RtResults\";\nimport useEth from \"../contexts/EthContext/useEth\";\nimport { Container, Navbar, Nav} from 'react-bootstrap';\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\"\n\nexport default function NavigationBar() {\n\n  const { state: { accounts } } = useEth();\n\n  return(\n    <Router>\n      <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n        <Container>\n          <Navbar.Brand href=\"#home\">Vote in a decentralised way</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto\">\n              <Nav.Link as={Link} to={\"/\"}>Main</Nav.Link>\n              <Nav.Link as={Link} to={\"/whitelist\"}>Whitelisted voters</Nav.Link>\n              <Nav.Link as={Link} to={\"/proposals\"}>Proposals</Nav.Link>\n              <Nav.Link as={Link} to={\"/results\"}>Results</Nav.Link>    \n            </Nav>      \n          </Navbar.Collapse> \n          <div className=\"text-light\">\n          Wallet address: {accounts}\n          </div>\n        </Container>\n      </Navbar>\n        <Routes>\n          <Route path=\"/\" element={<RtMain />}/>           \n          <Route path=\"/whitelist\" element={<RtWhitelist />}/>\n          <Route path=\"/proposals\" element={<RtProposals />}/>\n          <Route path=\"/results\" element={<RtResults />}/>\n          <Route path=\"/Alyra-project\" element={<RtMain />}/>\n        </Routes>\n    </Router>\n\n  );\n};\n\n","import { EthProvider } from \"./contexts/EthContext\";\nimport NavigationBar from \"./components/NavigationBar\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nexport default function App() {\n\n  return (\n    <EthProvider>\n      <div className=\"App\" >\n        <div className=\"container\">\n          <NavigationBar />\n         </div>\n      </div>\n    </EthProvider>\n  );\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}